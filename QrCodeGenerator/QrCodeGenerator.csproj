<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net6.0</TargetFrameworks>
    <IsTrimmable Condition="$([MSBuild]::IsTargetFrameworkCompatible('$(TargetFramework)', 'net6.0'))">true</IsTrimmable>
    <RootNamespace>Net.Codecrete.QrCodeGenerator</RootNamespace>
    <PackageId>Net.Codecrete.QrCodeGenerator</PackageId>
    <Version>2.0.4</Version>
    <Authors>Manuel Bleichenbacher, Project Nayuki</Authors>
    <Product>QR Code Generator for .NET</Product>
    <Description>QR Code Generator for .NET â€“ simple, compact and with many examples.

Core features:
- Supports encoding all 40 versions (sizes) and all 4 error correction levels, as per the QR Code Model 2 standard
- Output formats: Raw modules/pixels of the QR symbol, SVG and XAML path (for raster bitmap / PNG see project home page), BMP bitmap
- Encodes numeric and special-alphanumeric text in less space than general text
- Open source code under the permissive MIT License
- Significantly shorter code but more documentation compared to competing libraries
- Built for .NET Standard 2.0 and therefore runs on most modern .NET platforms (.NET Core, .NET Framework, Mono etc.).
- Derived from tried and tested implementation by project Nayuki

Manual parameters:
- You can specify the minimum and maximum version number allowed, and the library will automatically choose the smallest version in the range that fits the data.
- You can specify the mask pattern manually, otherwise library will automatically evaluate all 8 masks and select the optimal one.
- You can specify an error correction level, or optionally allow the library to boost it if it doesn't increase the version number.
- You can create a list of data segments manually and add ECI segments.

Optional advanced features:
- Encodes Japanese Unicode text in Kanji mode to save a lot of space compared to UTF-8 bytes
- Computes optimal segment mode switching for text with mixed numeric/alphanumeric/general/kanji parts</Description>
    <Copyright>Copyright (c) Manuel Bleichenbacher and Project Nayuki (MIT License)</Copyright>
    <RepositoryUrl>https://github.com/manuelbl/QrCodeGenerator</RepositoryUrl>
    <PackageProjectUrl>https://github.com/manuelbl/QrCodeGenerator</PackageProjectUrl>
    <PackageLicenseUrl></PackageLicenseUrl>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageIcon>logo.png</PackageIcon>
    <PackageTags>qr code, qrcode, kanji, qrcode generator, svg</PackageTags>
    <PackageReleaseNotes>New in releases 2.0 / 2.0.1 / 2.0.2 / 2.0.3 / 2.0.4:
- Fully compatible with .NET 6 (no longer depends on System.Drawing)
- Separate ToBitmap() implementations for System.Drawing, SkiaSharp and ImageSharp
- Documentation included into NuGet package
- QR code as geometric path suitable for SVG and XAML
- Very compact SVGs
- BMP bitmap generation
- Fix for SVG generation with Norwegian locale
</PackageReleaseNotes>
    <Company>Codecrete</Company>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>Key.snk</AssemblyOriginatorKeyFile>
    <AssemblyVersion>1.6.0.0</AssemblyVersion>
    <FileVersion>2.0.4.0</FileVersion>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <GenerateDocumentationFile>True</GenerateDocumentationFile>
    <EnablePackageValidation>true</EnablePackageValidation>
    <PackageVersion>2.0.4</PackageVersion>
    <PackageValidationBaselineVersion>2.0.0</PackageValidationBaselineVersion>
    <Deterministic>True</Deterministic>
  </PropertyGroup>

  <PropertyGroup Label="Restoring">
    <DisableImplicitNuGetFallbackFolder>true</DisableImplicitNuGetFallbackFolder>
	  <RestorePackagesWithLockFile>true</RestorePackagesWithLockFile>
	  <RestoreLockedMode Condition="$(ContinuousIntegrationBuild) == 'true'">true</RestoreLockedMode>
  </PropertyGroup>

  <PropertyGroup Label="Packaging">
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
    <DebugType>embedded</DebugType>
    <EmbedAllSources>true</EmbedAllSources>
    <ContinuousIntegrationBuild Condition="$(Configuration) == 'Release'">true</ContinuousIntegrationBuild>
  </PropertyGroup>
	
  <ItemGroup>
    <None Include="docs\logo.png" Pack="true" PackagePath="\" />
    <None Include="docs\README.md" Pack="true" PackagePath="\" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.*" PrivateAssets="all" />
  </ItemGroup>

  <Target Name="ValidateNuGetPackage" AfterTargets="Pack">
    <Exec Command="dotnet tool restore" />
    <Exec Command="dotnet validate package local $([MSBuild]::EnsureTrailingSlash($(PackageOutputPath)))$(PackageId).$(PackageVersion).nupkg" />
  </Target>
  
</Project>
